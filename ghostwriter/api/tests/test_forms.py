# Standard Libraries
import logging
from datetime import datetime, timedelta
from zipfile import error

# Django Imports
from django.test import TestCase

# Ghostwriter Libraries
from ghostwriter.api.forms import ApiEvidenceForm, ApiKeyForm, ApiReportTemplateForm
from ghostwriter.api.utils import get_reports_list
from ghostwriter.factories import (
    ClientFactory,
    ClientInviteFactory,
    DocTypeFactory,
    EvidenceOnReportFactory,
    ProjectAssignmentFactory,
    ReportFactory,
    ReportFindingLinkFactory,
    UserFactory,
)

logging.disable(logging.CRITICAL)

PASSWORD = "SuperNaturalReporting!"


class ApiKeyFormTests(TestCase):
    """Collection of tests for :form:`api.ApiKeyForm`."""

    @classmethod
    def setUpTestData(cls):
        pass

    def setUp(self):
        pass

    def form_data(
        self,
        name=None,
        expiry_date=None,
        **kwargs,
    ):
        return ApiKeyForm(
            data={
                "name": name,
                "expiry_date": expiry_date,
            },
        )

    def test_valid_data(self):
        form = self.form_data(name="Test Entry", expiry_date=datetime.now() + timedelta(days=1))
        self.assertTrue(form.is_valid())

    def test_empty_name(self):
        form = self.form_data(expiry_date=datetime.now())
        errors = form["name"].errors.as_data()
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors[0].code, "required")

    def test_empty_date(self):
        form = self.form_data(name="No Date")
        errors = form["expiry_date"].errors.as_data()
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors[0].code, "required")

    def test_expiry_date_in_past(self):
        form = self.form_data(name="Test Entry", expiry_date=datetime.now())
        errors = form["expiry_date"].errors.as_data()
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors[0].code, "invalid_expiry_date")


class ApiEvidenceFormTests(TestCase):
    """Collection of tests for :form:`api.ApiEvidenceForm`."""

    @classmethod
    def setUpTestData(cls):
        cls.report = ReportFactory()
        cls.other_report = ReportFactory()
        cls.finding = ReportFindingLinkFactory()
        cls.user = UserFactory(password=PASSWORD)
        ProjectAssignmentFactory(operator=cls.user, project=cls.report.project)

    def setUp(self):
        pass

    def form_data(
        self,
        friendly_name=None,
        description=None,
        caption=None,
        tags=None,
        finding=None,
        report=None,
        filename=None,
        file_base64=None,
        user_obj=None,
        report_queryset=None,
        **kwargs,
    ):
        return ApiEvidenceForm(
            data={
                "friendly_name": friendly_name,
                "description": description,
                "caption": caption,
                "tags": tags,
                "finding": finding,
                "report": report,
                "file_base64": file_base64,
                "filename": filename,
            },
            user_obj=user_obj,
            report_queryset=report_queryset,
        )

    def test_valid_data(self):
        form = self.form_data(
            friendly_name="Test Finding & Report",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=None,
            report=self.report,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        self.assertTrue(form.is_valid())

    def test_finding_and_report(self):
        form = self.form_data(
            friendly_name="Test Finding & Report",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=None,
            report=None,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 2)

        form = self.form_data(
            friendly_name="Test Finding & Report",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=self.finding,
            report=self.report,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)

    def test_invalid_extension(self):
        form = self.form_data(
            friendly_name="Test Finding & Report",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=None,
            report=self.report,
            filename="test.zip",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["filename"][0].code, "invalid")

    def test_invalid_report_and_finding(self):
        form = self.form_data(
            friendly_name="Test Finding & Report",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=None,
            report=self.other_report,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)

    def test_duplicate_friendly_name(self):
        evidence = EvidenceOnReportFactory(report=self.report, friendly_name="Duplicate Test")
        form = self.form_data(
            friendly_name="Duplicate Test",
            description="Test Description",
            caption="Test Caption",
            tags="Test, Tag",
            finding=None,
            report=self.report,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
            report_queryset=get_reports_list(self.user),
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["friendly_name"][0].code, "duplicate")


class ApiReportTemplateFormTests(TestCase):
    """Collection of tests for :form:`api.ApiReportTemplateForm`."""

    @classmethod
    def setUpTestData(cls):
        cls.user = UserFactory(password=PASSWORD)
        cls.docx_type = DocTypeFactory(doc_type="docx", extension="docx", name="docx")
        cls.pptx_type = DocTypeFactory(doc_type="pptx", extension="pptx", name="pptx")
        cls.report_client = ClientFactory(name="Test Client")
        cls.other_report_client = ClientFactory()
        ClientInviteFactory(client=cls.report_client, user=cls.user)

        cls.valid_docx = "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"
        cls.valid_pptx = ""

    def setUp(self):
        pass

    def form_data(
        self,
        name=None,
        description=None,
        protected=None,
        changelog=None,
        landscape=None,
        filename_override=None,
        tags=None,
        doc_type=None,
        client=None,
        p_style=None,
        filename=None,
        file_base64=None,
        user_obj=None,
        **kwargs,
    ):
        return ApiReportTemplateForm(
            data={
                "name": name,
                "description": description,
                "protected": protected,
                "changelog": changelog,
                "landscape": landscape,
                "filename_override": filename_override,
                "tags": tags,
                "doc_type": doc_type,
                "client": client,
                "p_style": p_style,
                "filename": filename,
                "file_base64": file_base64,
            },
            user_obj=user_obj,
        )

    def test_valid_data(self):
        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.docx_type,
            client=self.report_client,
            p_style=None,
            filename="test.docx",
            file_base64=self.valid_docx,
            user_obj=self.user,
        )
        self.assertTrue(form.is_valid())

        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.pptx_type,
            client=None,
            p_style=None,
            filename="test.pptx",
            file_base64=self.valid_pptx,
            user_obj=self.user,
        )
        self.assertTrue(form.is_valid())

    def test_unauthorized_or_invalid_client(self):
        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.docx_type,
            client=self.other_report_client,
            p_style=None,
            filename="test.docx",
            file_base64=self.valid_docx,
            user_obj=self.user,
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["client"][0].code, "invalid_choice")

    def test_invalid_extension(self):
        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.docx_type,
            client=None,
            p_style=None,
            filename="test.txt",
            file_base64="dGVzdA==",
            user_obj=self.user,
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["filename"][0].code, "invalid")

        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.pptx_type,
            client=None,
            p_style=None,
            filename="test.docx",
            file_base64=self.valid_docx,
            user_obj=self.user,
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["filename"][0].code, "mismatch")

    def test_invalid_file(self):
        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.docx_type,
            client=None,
            p_style=None,
            filename="test.docx",
            file_base64=self.valid_pptx,
            user_obj=self.user,
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["file_base64"][0].code, "invalid")

        form = self.form_data(
            name="Test Template",
            description="Test Description",
            protected=False,
            changelog="Test Changelog",
            landscape=False,
            filename_override=None,
            tags="Test, Tag",
            doc_type=self.pptx_type,
            client=None,
            p_style=None,
            filename="test.pptx",
            file_base64=self.valid_docx,
            user_obj=self.user,
        )
        errors = form.errors.as_data()
        self.assertFalse(form.is_valid())
        self.assertEqual(len(errors), 1)
        self.assertEqual(errors["file_base64"][0].code, "invalid")
