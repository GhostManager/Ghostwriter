tinymce.PluginManager.add('ghostwriter-comments', function(editor) {
    // Function to decode the users hex username into ascii
    function hex2ascii(hexString) {
        let decodedStr = '';
        for (let i = 0; i < hexString.length; i += 2) {
            const byte = parseInt(hexString.substr(i, 2), 16);
            decodedStr += String.fromCharCode(byte);
        }
        return decodedStr
    }

    // Create or Update Comments
    function upsertComment(selection, newThread) {
        editor.execCommand('mceInsertContent', false, `<span class="comment" comment-data="${encodeURIComponent(JSON.stringify(newThread))}">${selection}</span>`);
    }

    // Read Comments
    function readCommentThread(commentList) {
        let commentThread = [];
        commentList.forEach(comment => {
            const author = comment.getAttribute('data-author');
            var text = comment.textContent;
            if (!text) {
                text = comment.value;
            }
            commentThread.push({ author: author, comment: text });
        });
        return commentThread;
    }

    function readCommentSpan(commentNode) {
        let commentThread = [];
        if (commentNode.nodeName === 'SPAN' && commentNode.hasAttribute('comment-data')) {
            commentDataDecoded = decodeURIComponent(commentNode.getAttribute('comment-data'));
            commentData = JSON.parse(commentDataDecoded);
            commentData.forEach(item => {
                const author = item.author;
                const comment = item.comment;
                commentThread.push({ author: author, comment: comment });
            });
        }
        return commentThread;
    }

    // Resolve Comments
    function resolveComment(commentNode) {
        commentNode.className = 'comment-resolved';
    }

    editor.ui.registry.addMenuItem('comment', {
        icon: 'comment',
        text: 'Comment',
        onAction: function () {
            const selection = editor.selection.getContent();
            if (selection === '') {
                return;
            }
            const node = editor.selection.getNode();
            let commentsThread = '<div id="entire-comment-thread">';
            readCommentSpan(node).forEach(item => {
                const author = item.author;
                const comment = item.comment;
                const selfclass = author === username ? 'comment from-self' : 'comment';
                commentsThread +=
                `<div class="${selfclass}">
                    <div class="comment-header">
                        <h1>${tinymce.DOM.encode(hex2ascii(author))}</h1>
                        <img class="comment-avatar" src="/users/${encodeURIComponent(hex2ascii(author))}/avatar" alt="Avatar">
                    </div>
                    <p class="comment-text" data-author="${author}">${tinymce.DOM.encode(comment)}</p>
                </div>`;
            });
            commentsThread += '</div>';

            document.addEventListener('click', function (event) {
                if (event.target.classList.contains('comment-text')) {
                    const pTag = event.target;
                    const author = pTag.getAttribute('data-author');
                    if (author === username) {
                        const input = document.createElement('input');
                        input.type = 'text';
                        input.value = pTag.textContent;
                        input.className = 'comment-text';
                        input.setAttribute('data-author', author);
                        pTag.replaceWith(input);
                        input.focus();

                        input.addEventListener('blur', function () {
                            const newPTag = document.createElement('p');
                            newPTag.className = 'comment-text';
                            newPTag.setAttribute('data-author', author);
                            newPTag.textContent = input.value;
                            input.replaceWith(newPTag);
                        });
                        input.addEventListener('keydown', function (e) {
                            if (e.key === 'Enter') {
                                input.blur();
                            }
                        });
                    }
                }
            });

            const commentBox = editor.windowManager.open({
                title: 'Comments',
                body: {
                    type: 'panel',
                    items: [
                        { type: 'alertbanner', level: 'info', text: 'Click on your existing comments to edit', icon: 'warning' },
                        { type: 'htmlpanel', name: 'existingComments', html: commentsThread, },
                        { type: 'textarea', name: 'comment', label: 'Add Comment' },
                    ]
                },
                buttons: [
                    { type: 'cancel', text: 'Cancel' },
                    { type: 'custom', text: 'Resolve' },
                    { type: 'submit', text: 'Save' }
                ],
                onSubmit: (api) => {
                    const comment = api.getData().comment;
                    const HTMLcomments = document.querySelectorAll('.comment-text');
                    console.log(HTMLcomments);
                    let commentThread = readCommentThread(HTMLcomments);
                    if (comment) {
                        commentThread.push({ author: username, comment: comment });
                    }
                    upsertComment(selection, commentThread);
                    api.close();
                },
                onAction: (api) => {
                    if (node.nodeName === 'SPAN' && node.hasAttribute('comment-data')) {
                        resolveComment(node);
                        api.close();
                    }
                }
            });
        }
    });

    editor.on('click', function (e) {
        const content = editor.selection.getContent();
        const node = editor.selection.getNode();
        if (content === '' && node.nodeName === 'SPAN' && node.className === 'comment' && node.hasAttribute('comment-data')) {
            editor.selection.select(node.firstChild);
            editor.ui.registry.getAll().menuItems.comment.onAction();
        }
    });
});