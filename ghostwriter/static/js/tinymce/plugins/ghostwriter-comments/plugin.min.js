tinymce.PluginManager.add('ghostwriter-comments', function(editor) {
    // Function to decode the users hex username into ascii
    function hex2ascii(hexString) {
        let decodedStr = '';
        for (let i = 0; i < hexString.length; i += 2) {
            const byte = parseInt(hexString.substr(i, 2), 16);
            decodedStr += String.fromCharCode(byte);
        }
        return decodedStr
    }

    // Create Comment
    function createComment(comment, selection) {
        const commentNode = editor.selection.getNode();
        let commentThread = readComments(commentNode);
        commentThread.push({ author: username, comment: comment });
        editor.execCommand('mceInsertContent', false, `<span class="comment" comment-data="${encodeURIComponent(JSON.stringify(commentThread))}">${selection}</span>`);
    }

    // Read Comments
    function readComments(commentNode) {
        let commentThread = [];
        if (commentNode.nodeName === 'SPAN' && commentNode.hasAttribute('comment-data')) {
            commentDataDecoded = decodeURIComponent(commentNode.getAttribute('comment-data'));
            commentData = JSON.parse(commentDataDecoded);
            commentData.forEach(item => {
                const author = item.author;
                const comment = item.comment;
                commentThread.push({ author: author, comment: comment });
            });
        }
        return commentThread;
    }

    // Update Comments

    // Resolve Comments
    function resolveComment(commentNode) {
        commentNode.className = 'comment-resolved';
    }

    // Delete Comments


    editor.ui.registry.addMenuItem('comment', {
        icon: 'comment',
        text: 'Comment',
        onAction: function () {
            const selection = editor.selection.getContent();
            const node = editor.selection.getNode();
            let commentsThread = '';
            readComments(node).forEach(item => {
                const author = item.author;
                const comment = item.comment;
                const float = author === username ? 'right' : 'left';
                commentsThread +=
                `<div id="comment-thread" style="float: ${float};">
                    <div class="comment-header">
                        <h1>${tinymce.DOM.encode(hex2ascii(author))}</h1>
                        <img class="comment-avatar" src="/users/${tinymce.DOM.encode(hex2ascii(author))}/avatar" alt="Avatar">
                    </div>
                    <p><p>${tinymce.DOM.encode(comment)}</p></p>
                </div>`;
            });

            if (selection) {
                const commentBox = editor.windowManager.open({
                    title: 'Add Comment',
                    body: {
                        type: 'panel',
                        items: [
                            { type: 'htmlpanel', name: 'existingComments', html: commentsThread},
                            { type: 'textarea', name: 'comment', label: 'Comment' },
                        ]
                    },
                    buttons: [
                        { type: 'cancel', text: 'Cancel' },
                        { type: 'custom', text: 'Resolve' },
                        { type: 'submit', text: 'Post' }
                    ],
                    onSubmit: (api) => {
                        const comment = api.getData().comment;
                        // Add the comment to the dictionary
                        createComment(comment, selection);
                        api.close();
                    },
                    onAction: (api) => {
                        const Node = editor.selection.getNode();
                        if (Node.nodeName === 'SPAN' && Node.hasAttribute('comment-data')) {
                            resolveComment(Node);
                            api.close();
                        }
                    }
                });
            }
        }
    });

    editor.on('click', function (e) {
        const node = editor.selection.getNode();
        if (node.nodeName === 'SPAN' && node.className === 'comment' && node.hasAttribute('comment-data')) {
            editor.selection.select(node.firstChild);
            editor.ui.registry.getAll().menuItems.comment.onAction();
        }
    });
});