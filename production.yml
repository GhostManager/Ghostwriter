version: "3"

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_staticfiles: {}
  production_data: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: ghostwriter_production_django
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    volumes:
      - production_staticfiles:/app/staticfiles
      - production_data:/app/ghostwriter/media

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: ghostwriter_production_postgres
    restart: unless-stopped
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  nginx:
    build: ./compose/production/nginx
    image: ghostwriter_production_nginx
    restart: unless-stopped
    depends_on:
      - django
    volumes:
      - production_staticfiles:/app/staticfiles
      - ./compose/production/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/ssl
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"

  redis:
    image: redis:5-alpine
    restart: unless-stopped
    
  queue:
    <<: *django
    image: ghostwriter_production_queue
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
      - django
    ports: []
    command: /start-queue
